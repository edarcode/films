---
import type { GetStaticPaths } from "astro";
import Layout from "../../layouts/Layout/Layout.astro";
import { normalize } from "../../utils/normalize";
import { getFilmsService } from "./services/getFilmsService";
import Btn from "../../components/buttons/Btn/Btn.astro";
import { Icon } from "astro-icon/components";

export const getStaticPaths = (async () => {
  const films = await getFilmsService({ totalPages: 3 });

  const pages = films.map((film) => ({
    params: {
      title: normalize(film.title),
    },
    props: {
      id: film.id,
      title: film.title,
      backdrop: film.backdrop,
      poster: film.poster,
      overview: film.overview,
      releaseDate: film.release_date,
    },
  }));

  return pages;
}) satisfies GetStaticPaths;

const { id, title, backdrop, poster, overview, releaseDate } = Astro.props;
const date = new Date(releaseDate).toLocaleDateString();
---

<Layout title={title} img={poster} description={`Detalles sobre ${title}`}>
  <div class="details">
    <article>
      <h1>
        {title}
      </h1>
      <div class="wrapper1">
        <img src={backdrop} alt={title} />
        <p>{overview}</p>
        <span class="date">{date}</span>
      </div>
      <button class="wrapperHeart" id="wrapperHeart" data-filmid={id}>
        <Icon class="heart active" id="heart" name="heart" />
        <Icon class="heart_fill" id="heart_fill" name="heart_fill" />
      </button>
    </article>
    <Btn class="btn" onclick="history.back()">Volver</Btn>
  </div>
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const wrapperHeart = document.querySelector(
      "#wrapperHeart"
    ) as HTMLButtonElement;
    if (!wrapperHeart) return;

    const heart = document.querySelector("#heart") as SVGAElement;
    const heartFill = document.querySelector("#heart_fill") as SVGAElement;
    const filmId = wrapperHeart.dataset.filmid;

    const favoriteIds = JSON.parse(
      localStorage.getItem("filmIds") ?? "[]"
    ) as string[];

    const isFavoriteId = favoriteIds.some((id) => id === filmId);

    if (isFavoriteId) {
      heart.classList.remove("active");
      heartFill.classList.add("active");
    }

    wrapperHeart.addEventListener("click", () => {
      heart.classList.toggle("active");
      heartFill.classList.toggle("active");
      toggleFavoriteFilm(filmId);
    });

    const toggleFavoriteFilm = (id?: string) => {
      if (!id) return;

      const favoriteFilmIds = new Set([...favoriteIds]);

      if (favoriteFilmIds.has(id)) favoriteFilmIds.delete(id);
      else favoriteFilmIds.add(id);

      localStorage.setItem(
        "filmIds",
        JSON.stringify(Array.from(favoriteFilmIds))
      );
    };
  });
</script>

<style>
  .details {
    height: 100%;
    display: grid;
    align-content: center;
    gap: 1rem;

    .btn {
      justify-self: start;
    }

    article {
      position: relative;
      background-color: var(--bg-surf);
      border-radius: 1rem;
      padding: 2rem;
      display: grid;
      gap: 1rem;

      .wrapperHeart {
        position: absolute;
        top: 2rem;
        right: 2rem;
        cursor: pointer;
        width: 2rem;
        height: 2rem;

        .heart,
        .heart_fill {
          width: 100%;
          height: 100%;
          display: none;
        }

        .heart {
        }

        .heart_fill {
        }

        .active {
          display: initial;
        }
      }

      h1 {
        color: var(--primary);
        font-size: 3rem;
      }

      .wrapper1 {
        position: relative;
        display: grid;
        grid-template-columns: 35% 1fr;

        @media (max-width: 768px) {
          grid-template-columns: 1fr;
        }

        img {
          width: 100%;
          border-radius: 1rem;
        }

        p {
          padding: 1rem;
        }

        .date {
          position: absolute;
          bottom: 0;
          right: 0;
          border: var(--border);
          padding: 1rem;
          border-radius: 1rem;
          font-weight: bold;
        }
      }
    }
  }
</style>
